{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A service that can perform some operations with user balances.",
        "title": "User Balance Service",
        "contact": {
            "name": "Evgeny Belonogov",
            "url": "https://www.t.me/evgenchikkkkkk",
            "email": "ewbelonogov@ya.ru"
        },
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/add": {
            "post": {
                "description": "Responds with the \"add\" request body if OK.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user balance"
                ],
                "summary": "Add money to user's balance (creates user if not exists)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "AddSchemaJSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.AddSchemaJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.AddSchemaJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        },
        "/approve": {
            "post": {
                "description": "Responds with the \"approve\" request body if OK.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user balance"
                ],
                "summary": "Approve money from user's reserved balance (debit money to the company's revenue)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "ApproveSchemaJSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ApproveSchemaJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.ApproveSchemaJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        },
        "/balance": {
            "post": {
                "description": "Responds with the user balance as JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user balance"
                ],
                "summary": "Get user balance",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "BalanceSchemaJSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.BalanceSchemaJSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.BalanceResponseJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        },
        "/dereserve": {
            "post": {
                "description": "Responds with the \"dereserve\" request body if OK.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user balance"
                ],
                "summary": "De-reserve money from user's reserved balance",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "ReserveSchemaJSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.DereserveSchemaJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.DereserveSchemaJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        },
        "/report": {
            "post": {
                "description": "Responds with the link to report download page if OK.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Create report according to the selected period",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "ReportSchemaJSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ReportSchemaJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.ReportResponseJSON"
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        },
        "/report/{filename}": {
            "get": {
                "description": "download report file if OK.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Download report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "download file",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        },
        "/reserve": {
            "post": {
                "description": "Responds with the \"reserve\" request body if OK.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user balance"
                ],
                "summary": "Reserve money from user's real balance (deposit money to user's reserved balance)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "ReserveSchemaJSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ReserveSchemaJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.ReserveSchemaJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        },
        "/transfer": {
            "post": {
                "description": "Responds with the \"add\" request body if OK.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user balance"
                ],
                "summary": "Transfer money from one user to another (creates user if not exists)",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "AddSchemaJSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.TransferSchemaJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.AddSchemaJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponseJSON"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AddSchemaJSON": {
            "type": "object",
            "required": [
                "amount",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                },
                "user_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "api.ApproveSchemaJSON": {
            "type": "object",
            "required": [
                "amount",
                "order_id",
                "service_id",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                },
                "order_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "service_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "api.BalanceResponseJSON": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                }
            }
        },
        "api.BalanceSchemaJSON": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "api.DereserveSchemaJSON": {
            "type": "object",
            "required": [
                "order_id"
            ],
            "properties": {
                "order_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "api.ErrorResponseJSON": {
            "type": "object",
            "properties": {
                "http error": {
                    "type": "string"
                }
            }
        },
        "api.ReportResponseJSON": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                }
            }
        },
        "api.ReportSchemaJSON": {
            "type": "object",
            "required": [
                "period"
            ],
            "properties": {
                "period": {
                    "type": "string",
                    "example": "2022-10"
                }
            }
        },
        "api.ReserveSchemaJSON": {
            "type": "object",
            "required": [
                "order_id",
                "price",
                "service_id",
                "user_id"
            ],
            "properties": {
                "order_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "price": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                },
                "service_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            }
        },
        "api.TransferSchemaJSON": {
            "type": "object",
            "required": [
                "amount",
                "from_user_id",
                "to_user_id"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                },
                "from_user_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "to_user_id": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 2
                }
            }
        }
    }
}